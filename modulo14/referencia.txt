Bom, na maioria dos m√≥dulos eu expliquei sobre seguran√ßa de aplica√ß√µes envolvendo o contexto do m√≥dulo em quest√£o.



Como nosso contexto √© JavaScript, eu n√£o vou entrar muito a fundo no ponto de vista de infraestrutura, micro servi√ßos ou bancos de dados. 



Para isso, deixei aqui alguns links de palestras que fiz pelo mundo com dicas √∫teis para voc√™ revisar tudo que tem feito por ai.



Assim como fiz no m√≥dulo de design patterns, vamos navegar de volta em algumas aulas, comentando sobre o que voc√™ viu l√° e dar aquela refrescada na mem√≥ria



Vou separar cada peda√ßo desse v√≠deo como uma dica espec√≠fica sobre seguran√ßa de apps JavaScript, assim fica mais f√°cil de voc√™ revisar no futuro.



Vamos come√ßar por um dos meus m√≥dulos favoritos aqui do treinamento, o m√≥dulo 5 sobre Express√µes regulares.



#1 - Evite ataques DoS em Express√µes regulares



Nessa aula, eu mostrei como uma simples express√£o regular ou Regex pode derrubar sua aplica√ß√£o, para resolver esse problema, n√≥s instalamos o m√≥dulo Safe-regex para validar as express√µes antes de execut√°-la.



Existem outros pacotes bem legais, para te ajudar a escrever c√≥digo seguro em tempo de compila√ß√£o. 



Se voc√™ nunca ouviu falar sobre o ESLint, ele √© uma excelente ferramenta para JavaScript para validar regras de c√≥digo.

E para ele, tem um plugin focado em seguran√ßa de apps JS, bem que valida regras e exibe na hora se voc√™ tem algum problema do ponto de vista de c√≥digo



#2 - Evite ataques em pacotes NPM

J√° no m√≥dulo sobre pacotes NPM n√≥s falamos sobre esse artigo muito doido da Snyk falando sobre como usu√°rios mal intencionados podem injetar pacotes sem voc√™ notar direto no package-lock.json, com o famoso ataque de package-lock.json pollution



Estou gravando essa aula em Janeiro de 2022 e aconteceu um ataque recente que repercutiu o mundo inteiro.



Um desenvolvedor injetou um vulnerabilidade de prop√≥sito em alguns pacotes JavaScript super populares, os pacotes Colors e Faker.js como forma de protesto 



Sim, √© ele mesmo que voc√™ est√° pensando. N√≥s usamos o pacote Faker aqui no curso com bastante frequ√™ncia, mas n√£o se preocupe, eu te conto em alguns instantes como voc√™ pode continuar usando a vers√£o anterior do pacote.



S√≥ o pacote npm Colors, recebe mais de 20 milh√µes de downloads por semana, √© usado em mais de 4 milh√µes de projetos e √© uma depend√™ncia de quase 19 mil outros pacotes üò±



E agora? Ser√° que o dev endoidou de vez?



Na pr√°tica, essa n√£o √© a primeira vez que um dev de projetos Open Source se frustra, desiste do projeto ou surta de vez.



Essa foi a vez do Marak, que mant√©m centenas de pacotes Open Source que, apesar de serem usados por empresas gigantes, ele trabalha em seu tempo livre e n√£o ganha sequer doa√ß√µes dessas empresas.



Eu n√£o vou comentar se acho que ele est√° certo ou errado.



Ele injetou um loop infinito nos pacotes colors e Faker.js para que todos que atualizassem os pacotes para a vers√£o mais recente, simplesmente travassem suas aplica√ß√µes.



Sobre a vulnerabilidade, aqui no curso voc√™ aprendeu sobre como instalar pacotes com vers√µes fixas para evitar que novas vers√µes simplesmente quebram todo o seu sistema.



Ent√£o provavelmente, o que voc√™ fez em seus projetos aqui do curso, n√£o ser√£o afetados por essa nova vers√£o do pacote.



A principal dica de seguran√ßa aqui √©: estabele√ßa uma rotina de atualiza√ß√£o e valida√ß√£o de seus pacotes. 



Nunca permita que seus pacotes se atualizem sozinhos, eu pessoalmente j√° derrubei servidores em produ√ß√£o porque um pacote que a gente usava era atualizado toda vez que precis√°vamos fazer um deploy. 



Foi bem complicado haha

O Liran Tal da Snyk, escreveu esse excelente artigo que j√° deixei aqui na descri√ß√£o para voc√™ olhar para saber o que fazer e todos os detalhes dessa treta com esses pacotes.

E al√©m de tudo isso, temos ainda o problema de inje√ß√£o de m√≥dulos maliciosos que mostrei no m√≥dulo sobre pacotes NPM, que tamb√©m foi escrito pela Snyk. 



#3 - Jamais retorne erros internos para seus clientes



No m√≥dulo sobre Error Handling eu mostrei todos os erros n√£o capturados pelo Node.js.



Mas a li√ß√£o de seguran√ßa que voc√™ precisa ter aqui, √© nunca retornar essas mensagens de erro ao cliente final, pois ele pode se aproveitar dos resultados. 



Deu algum problema? √â mensagem de internal server error e j√° era!



#4 - Evite ataques DoS e adicione uma ferramenta de rate limit



J√° no m√≥dulo de performance, voc√™ aprendeu sobre como visualizar vazamentos de mem√≥ria e principalmente, como um cliente pode bombardear sua aplica√ß√£o at√© ou travar tudo at√© tirar todo o sistema do ar.



Como o conceito do curso √© sobre JavaScript e n√£o infraestrutura, eu n√£o fui muito a fundo sobre algumas alternativas que voc√™ pode adicionar na aplica√ß√£o para evitar esse tipo de problema.



O que eu sempre fa√ßo √© usar uma ferramenta de rate limit, uma ferramenta que controle qual √© a quantidade m√°xima de requests que um cliente pode fazer vindo do mesmo IP e recuse o acesso caso ele exceda os limites. 



L√° no treinamento de apps serverless, eu ensino a trabalhar com a AWS API Gateway, gerando chaves com cotas espec√≠ficas para cada cliente, assim voc√™ consegue limitar a quantidade de acessos simult√¢neos e claro, ficar sabendo quando √© um ataque ou s√≥ seu cliente acessando normalmente.



Ah e claro n√©, se voc√™ ainda n√£o fez isso, contrate uma ferramenta de Application Performance Monitoring, independente qual, escolha uma e ative alertas para entender a sa√∫de da sua aplica√ß√£o, isso pode te fazer economizar uma boa grana em seguran√ßa e infraestrutura no futuro.



#5 - Evite travar o event-loop



J√° no m√≥dulo sobre fun√ß√µes de longa dura√ß√£o, nosso conceito de seguran√ßa vem de encontro com o que acabei de falar. 



Se voc√™ evitar rodar processamento s√≠ncrono na thread principal do Node.js, voc√™ al√©m de tornar sua aplica√ß√£o mais saud√°vel evita ataques como os de DDoS que v√£o travar seu programa Node.js at√© que voc√™ n√£o consiga mais responder a requests.



A forma ideal √© que seus requests n√£o processem muita coisa em mem√≥ria, que voc√™ receba os par√¢metros do seu cliente, processe-os em segundo plano e s√≥ depois voc√™ os avisa que o processo se encerrou.



Mas caso voc√™ realmente precise processar dados entre requests, use e abuse dos child processes e worker threads para liberar a thread principal, sempre lembrando de controlar o pool de tarefas.



 #6 - Evite inje√ß√£o de c√≥digo arbitr√°rio



Seguran√ßa de aplica√ß√µes, em grande parte das vezes se resume a como voc√™ vai dificultar a vida do usu√°rio mal intencionado. 



E isso deve-se a como voc√™ vai controlar o acesso aos seus servi√ßos, como vai validar a entrada de dados e principalmente, como vai entregar mensagens ao cliente final.

demo m√≥dulo extra



E para fechar, eu fiz algumas palestras na gringa falando sobre dicas para melhorar a seguran√ßa de suas aplica√ß√µes Node.js e l√° eu falo sobre outros contextos como infraestrutura, banco de dados e microsservi√ßos, o link tamb√©m est√° aqui na descri√ß√£o



Esse m√≥dulo foi um m√≥dulo feito para agrupar o que voc√™ j√° viu aqui no treinamento do ponto de vista de seguran√ßa de aplica√ß√µes. 



O nosso contexto aqui do curso, √© sobre JavaScript e acredito essas s√£o as dicas que voc√™ j√° consegue implementar ai no seu trabalho o mais r√°pido poss√≠vel.



Para os pr√≥ximos passos, eu te convido a dar uma olhada nos links que deixei aqui na descri√ß√£o e claro, aplique ao m√°ximo essas dicas em seu dia a dia que tenho certeza que isso pode te ajudar demais



N√£o esque√ßa de avaliar essa aula clicando na estrelinha abaixo, Eu sou o Erick Wendel e te vejo no pr√≥ximo v√≠deo



Leitura recomendada

https://blog.sqreen.com/nodejs-security-best-practices/

https://snyk.io/blog/what-is-package-lock-json/

https://snyk.io/blog/why-npm-lockfiles-can-be-a-security-blindspot-for-injecting-malicious-modules/

https://snyk.io/blog/open-source-npm-packages-colors-faker/

https://erickwendel.com/talk/detail/5fa9561af663f6a8b69a7a19

https://www.npmjs.com/package/express-rate-limit

https://snyk.io/blog/open-source-npm-packages-colors-faker/

  
 
Coment√°rios
D√∫vidas
Deixe seu coment√°rio
Meu Progresso - 97.7%
85 de 87 aulas
Introdu√ß√£o ao Curso
2 aulas
Javascript Testing
9 aulas
Conceitos fundamentais sobre o ciclo de vida do Javascript Parte 01
6 aulas
Conceitos fundamentais sobre o ciclo de vida do Javascript - Parte 02
7 aulas
Advanced Javascript Data Types
7 aulas
Express√µes Regulares - RegExp
5 aulas
Design Patterns PT 01 - Best Practices and Creational Design Patterns
6 aulas
Design Patterns PT 02 - Behavioural and Structural Design Patterns
7 aulas
Masterizando o NPM
5 aulas
Node.js Command Line Interface (CLI)
8 aulas
Node.js Streams
5 aulas
Error Handling
5 aulas
Performance
6 aulas
Node.js long-running processing
6 aulas
Javascript Security
Introdu√ß√£o
Boas pr√°ticas de seguran√ßa em apps JavaScript + Revisando o que fizemos em outras aulas
